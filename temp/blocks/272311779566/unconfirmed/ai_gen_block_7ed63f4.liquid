{% doc %}
  @prompt
    product cards collection below product image price
    variants 
    add to cart button, also can you mak a variants dropdown and add to cart make a small button and all equal size ang align the cta button add to cart please, this is good but i need also to change the product image and price when variants choose , by product image default it should be same with price also. 
    can you also make hover effect the second image show when hover over the product image, can you make price default should be same with primary product image, when default product image the price should be larger variants.
    also the drawer cart automatically open and the items added to the cart without delay and refresh, when add to cart it should be the drawer cart open automatically and the items also there without needed to refresh the browser.
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-product-cards-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-product-cards-container-{{ ai_gen_id }} {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }

  .ai-product-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.products_per_row_desktop }}, 1fr);
    gap: {{ block.settings.grid_gap }}px;
  }

  .ai-product-card-{{ ai_gen_id }} {
    background: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    padding: {{ block.settings.card_padding }}px;
    box-shadow: {{ block.settings.card_shadow }};
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .ai-product-card-{{ ai_gen_id }}:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .ai-product-image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    aspect-ratio: {{ block.settings.image_aspect_ratio }};
    overflow: hidden;
    border-radius: {{ block.settings.image_border_radius }}px;
    margin-bottom: 15px;
  }

  .ai-product-image-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }

  .ai-product-image-hover-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .ai-product-image-wrapper-{{ ai_gen_id }}:hover .ai-product-image-hover-{{ ai_gen_id }} {
    opacity: 1;
  }

  .ai-product-image-wrapper-{{ ai_gen_id }}:hover .ai-product-image-{{ ai_gen_id }} {
    opacity: 0;
  }

  .ai-product-info-{{ ai_gen_id }} {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .ai-product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_size }}px;
    font-weight: 600;
    color: {{ block.settings.title_color }};
    margin: 0 0 8px;
    line-height: 1.3;
  }

  .ai-product-title-{{ ai_gen_id }} a {
    color: inherit;
    text-decoration: none;
  }

  .ai-product-title-{{ ai_gen_id }} a:hover {
    text-decoration: underline;
  }

  .ai-product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_size }}px;
    font-weight: 700;
    color: {{ block.settings.price_color }};
    margin-bottom: 15px;
  }

  .ai-product-price-compare-{{ ai_gen_id }} {
    text-decoration: line-through;
    color: #999;
    margin-right: 8px;
    font-weight: 400;
  }

  .ai-product-variants-{{ ai_gen_id }} {
    margin-bottom: 15px;
  }

  .ai-variant-select-{{ ai_gen_id }} {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid {{ block.settings.input_border_color }};
    border-radius: {{ block.settings.input_border_radius }}px;
    background: {{ block.settings.input_background }};
    font-size: 14px;
    margin-bottom: 10px;
  }

  .ai-add-to-cart-wrapper-{{ ai_gen_id }} {
    margin-top: auto;
  }

  .ai-add-to-cart-btn-{{ ai_gen_id }} {
    width: 100%;
    padding: {{ block.settings.button_padding }}px;
    background: {{ block.settings.button_background }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: {{ block.settings.button_font_size }}px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .ai-add-to-cart-btn-{{ ai_gen_id }}:hover {
    background: {{ block.settings.button_hover_background }};
    transform: translateY(-1px);
  }

  .ai-add-to-cart-btn-{{ ai_gen_id }}:disabled {
    background: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  .ai-loading-{{ ai_gen_id }} {
    display: none;
    width: 20px;
    height: 20px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: ai-spin-{{ ai_gen_id }} 1s linear infinite;
    margin-right: 8px;
  }

  @keyframes ai-spin-{{ ai_gen_id }} {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .ai-product-badge-{{ ai_gen_id }} {
    position: absolute;
    top: 10px;
    left: 10px;
    background: {{ block.settings.badge_background }};
    color: {{ block.settings.badge_text_color }};
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
    z-index: 2;
  }

  @media screen and (max-width: 768px) {
    .ai-product-grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.products_per_row_mobile }}, 1fr);
      gap: {{ block.settings.grid_gap | times: 0.7 }}px;
    }

    .ai-product-card-{{ ai_gen_id }} {
      padding: {{ block.settings.card_padding | times: 0.8 }}px;
    }

    .ai-product-title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_size | times: 0.9 }}px;
    }

    .ai-product-price-{{ ai_gen_id }} {
      font-size: {{ block.settings.price_size | times: 0.9 }}px;
    }
  }

  .ai-empty-state-{{ ai_gen_id }} {
    text-align: center;
    padding: 60px 20px;
    color: #666;
  }

  .ai-empty-state-{{ ai_gen_id }} h3 {
    font-size: 24px;
    margin-bottom: 10px;
  }
{% endstyle %}

<product-cards-{{ ai_gen_id }}
  class="ai-product-cards-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
  data-cart-drawer="{{ settings.cart_type }}"
>
  <div class="ai-product-cards-container-{{ ai_gen_id }}">
    {% if block.settings.collection != blank %}
      <div class="ai-product-grid-{{ ai_gen_id }}">
        {% for product in block.settings.collection.products limit: block.settings.products_limit %}
          <div class="ai-product-card-{{ ai_gen_id }}" data-product-id="{{ product.id }}">
            <div class="ai-product-image-wrapper-{{ ai_gen_id }}">
              {% if product.featured_image %}
                <img
                  src="{{ product.featured_image | image_url: width: 500 }}"
                  alt="{{ product.featured_image.alt | escape }}"
                  class="ai-product-image-{{ ai_gen_id }}"
                  loading="lazy"
                  width="500"
                  height="500"
                >
                {% if product.images[1] %}
                  <img
                    src="{{ product.images[1] | image_url: width: 500 }}"
                    alt="{{ product.images[1].alt | escape }}"
                    class="ai-product-image-hover-{{ ai_gen_id }}"
                    loading="lazy"
                    width="500"
                    height="500"
                  >
                {% endif %}
              {% else %}
                <div class="ai-product-image-placeholder-{{ ai_gen_id }}">
                  {{ 'product-1' | placeholder_svg_tag }}
                </div>
              {% endif %}

              {% if product.compare_at_price > product.price %}
                <div class="ai-product-badge-{{ ai_gen_id }}">
                  {% assign savings = product.compare_at_price | minus: product.price %}
                  {% assign savings_percent = savings | times: 100 | divided_by: product.compare_at_price %}
                  {{ savings_percent }}% OFF
                </div>
              {% endif %}
            </div>

            <div class="ai-product-info-{{ ai_gen_id }}">
              <h3 class="ai-product-title-{{ ai_gen_id }}">
                <a href="{{ product.url }}">{{ product.title }}</a>
              </h3>

              <div class="ai-product-price-{{ ai_gen_id }}" data-price-display>
                {% if product.compare_at_price > product.price %}
                  <span class="ai-product-price-compare-{{ ai_gen_id }}">{{ product.compare_at_price | money }}</span>
                {% endif %}
                <span data-price>{{ product.price | money }}</span>
              </div>

              {% if product.has_only_default_variant == false %}
                <div class="ai-product-variants-{{ ai_gen_id }}">
                  {% for option in product.options_with_values %}
                    <select 
                      class="ai-variant-select-{{ ai_gen_id }}"
                      data-option-index="{{ forloop.index0 }}"
                      data-option-name="{{ option.name | handleize }}"
                    >
                      {% for value in option.values %}
                        <option value="{{ value | escape }}">{{ option.name }}: {{ value }}</option>
                      {% endfor %}
                    </select>
                  {% endfor %}
                </div>
              {% endif %}

              <div class="ai-add-to-cart-wrapper-{{ ai_gen_id }}">
                <button 
                  class="ai-add-to-cart-btn-{{ ai_gen_id }}"
                  data-product-id="{{ product.id }}"
                  data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                  {% unless product.available %}disabled{% endunless %}
                >
                  <span class="ai-loading-{{ ai_gen_id }}"></span>
                  <span class="ai-button-text-{{ ai_gen_id }}">
                    {% if product.available %}
                      {{ block.settings.add_to_cart_text }}
                    {% else %}
                      Sold Out
                    {% endif %}
                  </span>
                </button>
              </div>
            </div>

            <script type="application/json" data-product-json>
              {{ product | json }}
            </script>
          </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="ai-empty-state-{{ ai_gen_id }}">
        <h3>No collection selected</h3>
        <p>Please select a collection to display products.</p>
      </div>
    {% endif %}
  </div>
</product-cards-{{ ai_gen_id }}>

<script>
  (function() {
    class ProductCards{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.cartDrawerType = this.dataset.cartDrawer;
      }

      connectedCallback() {
        this.setupVariantSelectors();
        this.setupAddToCartButtons();
      }

      setupVariantSelectors() {
        const productCards = this.querySelectorAll('.ai-product-card-{{ ai_gen_id }}');
        
        productCards.forEach(card => {
          const productJson = JSON.parse(card.querySelector('[data-product-json]').textContent);
          const selects = card.querySelectorAll('.ai-variant-select-{{ ai_gen_id }}');
          const priceDisplay = card.querySelector('[data-price]');
          const priceContainer = card.querySelector('[data-price-display]');
          const addToCartBtn = card.querySelector('.ai-add-to-cart-btn-{{ ai_gen_id }}');
          const productImage = card.querySelector('.ai-product-image-{{ ai_gen_id }}');
          const hoverImage = card.querySelector('.ai-product-image-hover-{{ ai_gen_id }}');

          if (selects.length === 0) return;

          selects.forEach(select => {
            select.addEventListener('change', () => {
              const selectedOptions = Array.from(selects).map(s => s.value);
              const variant = this.findVariantByOptions(productJson, selectedOptions);
              
              if (variant) {
                // Update price
                priceDisplay.textContent = this.formatMoney(variant.price);
                
                // Update compare at price
                const compareSpan = priceContainer.querySelector('.ai-product-price-compare-{{ ai_gen_id }}');
                if (variant.compare_at_price && variant.compare_at_price > variant.price) {
                  if (!compareSpan) {
                    const newCompareSpan = document.createElement('span');
                    newCompareSpan.className = 'ai-product-price-compare-{{ ai_gen_id }}';
                    newCompareSpan.textContent = this.formatMoney(variant.compare_at_price);
                    priceContainer.insertBefore(newCompareSpan, priceDisplay);
                  } else {
                    compareSpan.textContent = this.formatMoney(variant.compare_at_price);
                  }
                } else if (compareSpan) {
                  compareSpan.remove();
                }

                // Update variant ID
                addToCartBtn.dataset.variantId = variant.id;
                
                // Update availability
                if (variant.available) {
                  addToCartBtn.disabled = false;
                  addToCartBtn.querySelector('.ai-button-text-{{ ai_gen_id }}').textContent = '{{ block.settings.add_to_cart_text }}';
                } else {
                  addToCartBtn.disabled = true;
                  addToCartBtn.querySelector('.ai-button-text-{{ ai_gen_id }}').textContent = 'Sold Out';
                }

                // Update product image if variant has featured image
                if (variant.featured_image && productImage) {
                  productImage.src = variant.featured_image.src.replace(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?.*)?$/i, '_500x500.$1$2');
                  productImage.alt = variant.featured_image.alt || productJson.title;
                  
                  // Update hover image to second image of the variant or product
                  if (hoverImage) {
                    const variantImages = productJson.images.filter(img => 
                      variant.featured_image && img.id !== variant.featured_image.id
                    );
                    if (variantImages.length > 0) {
                      hoverImage.src = variantImages[0].src.replace(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?.*)?$/i, '_500x500.$1$2');
                      hoverImage.alt = variantImages[0].alt || productJson.title;
                    }
                  }
                }
              }
            });
          });
        });
      }

      setupAddToCartButtons() {
        const buttons = this.querySelectorAll('.ai-add-to-cart-btn-{{ ai_gen_id }}');
        
        buttons.forEach(button => {
          button.addEventListener('click', async (e) => {
            e.preventDefault();
            
            if (button.disabled) return;
            
            const variantId = button.dataset.variantId;
            const loadingSpinner = button.querySelector('.ai-loading-{{ ai_gen_id }}');
            const buttonText = button.querySelector('.ai-button-text-{{ ai_gen_id }}');
            
            // Show loading state
            button.disabled = true;
            loadingSpinner.style.display = 'inline-block';
            buttonText.textContent = 'Adding...';
            
            try {
              const response = await fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  id: variantId,
                  quantity: 1
                })
              });
              
              if (response.ok) {
                const addedItem = await response.json();
                
                // Update cart count immediately
                await this.updateCartCount();
                
                // Refresh cart drawer content
                await this.refreshCartDrawer();
                
                // Open cart drawer with delay to ensure content is loaded
                setTimeout(() => {
                  this.openCartDrawer();
                }, 100);
                
                // Reset button
                buttonText.textContent = '{{ block.settings.add_to_cart_text }}';
                
                // Trigger success events
                this.triggerCartEvents(addedItem);
                
              } else {
                throw new Error('Failed to add to cart');
              }
            } catch (error) {
              console.error('Error adding to cart:', error);
              buttonText.textContent = 'Error - Try Again';
              setTimeout(() => {
                buttonText.textContent = '{{ block.settings.add_to_cart_text }}';
              }, 2000);
            } finally {
              button.disabled = false;
              loadingSpinner.style.display = 'none';
            }
          });
        });
      }

      async refreshCartDrawer() {
        try {
          // Get fresh cart data
          const cartResponse = await fetch('/cart.js');
          const cartData = await cartResponse.json();
          
          // Try to refresh cart drawer content if it exists
          const cartDrawerContent = document.querySelector('[data-cart-drawer-content]') ||
                                   document.querySelector('.cart-drawer__content') ||
                                   document.querySelector('.drawer__content') ||
                                   document.querySelector('#cart-drawer-content');
          
          if (cartDrawerContent) {
            // Fetch updated cart drawer HTML
            const drawerResponse = await fetch('/cart?view=drawer');
            if (drawerResponse.ok) {
              const drawerHTML = await drawerResponse.text();
              const parser = new DOMParser();
              const doc = parser.parseFromString(drawerHTML, 'text/html');
              const newContent = doc.querySelector('[data-cart-drawer-content]') ||
                               doc.querySelector('.cart-drawer__content') ||
                               doc.querySelector('.drawer__content');
              
              if (newContent) {
                cartDrawerContent.innerHTML = newContent.innerHTML;
              }
            }
          }
          
          // Update any cart summary elements
          const cartSummary = document.querySelector('[data-cart-summary]');
          if (cartSummary && cartData) {
            const totalPrice = cartData.total_price;
            const itemCount = cartData.item_count;
            
            const priceElements = cartSummary.querySelectorAll('[data-cart-total]');
            priceElements.forEach(el => {
              el.textContent = this.formatMoney(totalPrice);
            });
          }
          
        } catch (error) {
          console.error('Error refreshing cart drawer:', error);
        }
      }

      openCartDrawer() {
        // Multiple approaches to ensure cart drawer opens
        const cartDrawerSelectors = [
          '[data-cart-drawer]',
          '.cart-drawer',
          '#cart-drawer',
          '.drawer',
          '[data-drawer="cart"]',
          '.js-drawer-open-cart'
        ];
        
        let cartDrawer = null;
        for (const selector of cartDrawerSelectors) {
          cartDrawer = document.querySelector(selector);
          if (cartDrawer) break;
        }
        
        if (cartDrawer) {
          // Add multiple classes that might trigger the drawer
          cartDrawer.classList.add('is-open', 'active', 'open', 'drawer--is-open');
          cartDrawer.setAttribute('aria-hidden', 'false');
          
          // Add body classes
          document.body.classList.add('cart-open', 'drawer-open', 'overflow-hidden');
          document.documentElement.classList.add('cart-open', 'drawer-open');
        }
        
        // Try clicking cart icon if drawer doesn't open
        setTimeout(() => {
          const cartIcon = document.querySelector('[data-cart-icon]') ||
                          document.querySelector('.cart-icon') ||
                          document.querySelector('[data-drawer-trigger="cart"]') ||
                          document.querySelector('.js-drawer-open-cart');
          
          if (cartIcon && !document.querySelector('.cart-drawer.is-open, .drawer.is-open, [data-cart-drawer].is-open')) {
            cartIcon.click();
          }
        }, 50);
        
        // Dispatch multiple events
        this.triggerDrawerEvents();
      }

      triggerDrawerEvents() {
        const events = [
          'cart:open',
          'drawer:open',
          'cart-drawer:open',
          'cartDrawer:open',
          'theme:cart:open'
        ];
        
        events.forEach(eventName => {
          document.dispatchEvent(new CustomEvent(eventName, {
            bubbles: true,
            detail: { source: 'product-cards' }
          }));
          
          window.dispatchEvent(new CustomEvent(eventName, {
            bubbles: true,
            detail: { source: 'product-cards' }
          }));
        });
      }

      triggerCartEvents(addedItem) {
        const events = [
          'cart:updated',
          'cart:item-added',
          'theme:cart:change'
        ];
        
        events.forEach(eventName => {
          document.dispatchEvent(new CustomEvent(eventName, {
            bubbles: true,
            detail: { item: addedItem, source: 'product-cards' }
          }));
        });
      }

      async updateCartCount() {
        try {
          const response = await fetch('/cart.js');
          const cart = await response.json();
          
          const cartCountSelectors = [
            '[data-cart-count]',
            '.cart-count',
            '.cart-counter',
            '[data-cart-counter]',
            '.header__cart-count'
          ];
          
          cartCountSelectors.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(element => {
              element.textContent = cart.item_count;
              element.setAttribute('data-count', cart.item_count);
            });
          });
          
          // Trigger cart count animation
          const cartIcon = document.querySelector('.cart-icon, [data-cart-icon], .header__cart');
          if (cartIcon) {
            cartIcon.classList.add('cart-updated', 'animate');
            setTimeout(() => {
              cartIcon.classList.remove('cart-updated', 'animate');
            }, 600);
          }
          
          return cart;
        } catch (error) {
          console.error('Error updating cart count:', error);
          return null;
        }
      }

      findVariantByOptions(product, selectedOptions) {
        return product.variants.find(variant => {
          return selectedOptions.every((option, index) => {
            return variant.options[index] === option;
          });
        });
      }

      formatMoney(cents) {
        const money = (cents / 100).toFixed(2);
        return '₱' + money;
      }
    }

    customElements.define('product-cards-{{ ai_gen_id }}', ProductCards{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product cards collection",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Collection"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 4,
      "max": 24,
      "step": 2,
      "label": "Products to show",
      "default": 8
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "products_per_row_desktop",
      "min": 2,
      "max": 4,
      "step": 1,
      "label": "Products per row (desktop)",
      "default": 4
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "Products per row (mobile)",
      "options": [
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "grid_gap",
      "min": 10,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Card style"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Section background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "card_padding",
      "min": 10,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Card padding",
      "default": 16
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 8
    },
    {
      "type": "select",
      "id": "card_shadow",
      "label": "Card shadow",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "0 2px 4px rgba(0,0,0,0.1)",
          "label": "Light"
        },
        {
          "value": "0 4px 8px rgba(0,0,0,0.15)",
          "label": "Medium"
        },
        {
          "value": "0 8px 16px rgba(0,0,0,0.2)",
          "label": "Strong"
        }
      ],
      "default": "0 2px 4px rgba(0,0,0,0.1)"
    },
    {
      "type": "header",
      "content": "Image"
    },
    {
      "type": "range",
      "id": "image_aspect_ratio",
      "min": 0.5,
      "max": 1.5,
      "step": 0.1,
      "label": "Image aspect ratio",
      "default": 1.0
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Title size",
      "default": 16
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 14,
      "max": 28,
      "step": 1,
      "unit": "px",
      "label": "Price size",
      "default": 18
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "header",
      "content": "Button"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart text",
      "default": "Add to Cart"
    },
    {
      "type": "color",
      "id": "button_background",
      "label": "Button background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_background",
      "label": "Button hover background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "button_font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Button font size",
      "default": 14
    },
    {
      "type": "range",
      "id": "button_padding",
      "min": 8,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button padding",
      "default": 12
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Button border radius",
      "default": 6
    },
    {
      "type": "header",
      "content": "Form elements"
    },
    {
      "type": "color",
      "id": "input_background",
      "label": "Input background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "input_border_color",
      "label": "Input border color",
      "default": "#cccccc"
    },
    {
      "type": "range",
      "id": "input_border_radius",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Input border radius",
      "default": 4
    },
    {
      "type": "header",
      "content": "Badge"
    },
    {
      "type": "color",
      "id": "badge_background",
      "label": "Sale badge background",
      "default": "#ff4444"
    },
    {
      "type": "color",
      "id": "badge_text_color",
      "label": "Sale badge text",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Product cards collection"
    }
  ]
}
{% endschema %}