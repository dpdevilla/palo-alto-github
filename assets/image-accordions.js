!function(){"use strict";customElements.get("image-accordions")||customElements.define("image-accordions",class extends HTMLElement{constructor(){super(),this.container=this.parentNode,this.controller=new AbortController,this.accordionExpandEvent=t=>this.accordionExpand(t),this.accordionFocusEvent=t=>this.accordionFocus(t)}connectedCallback(){this.imageAccordionsItems=this.querySelectorAll("[data-accordion-item]"),this.buttons=this.querySelectorAll("[data-accordion-button]"),this.triggerLoadingAnimation(),this.imageAccordionsItems.forEach((t=>{t.addEventListener("mouseenter",this.accordionExpandEvent.bind(this,t))})),this.buttons.forEach((t=>{t.addEventListener("focusin",this.accordionFocusEvent.bind(this,t))}))}triggerLoadingAnimation(){if("false"==theme.settings.animationsEnabled)return;const t=i=>{"expandAccordion"===i.animationName&&(this.accordionExpand(this.imageAccordionsItems[0]),this.container.classList.remove("to-animate"),this.container.classList.remove("is-animating"),this.container.removeEventListener("animationend",t))},i=t=>{requestAnimationFrame((()=>{t.target===this.container&&(this.container.classList.add("is-animating"),this.container.removeEventListener("transitionend",i))}))};this.container.addEventListener("transitionend",i,{signal:this.controller.signal}),this.container.addEventListener("animationend",t,{signal:this.controller.signal})}accordionExpand(t){t.classList.contains("is-active")||(this.imageAccordionsItems.forEach((t=>{t.classList.remove("is-active")})),t.classList.add("is-active"))}accordionFocus(t){t.closest("[data-accordion-item]")?.dispatchEvent(new Event("mouseenter"))}})}();
