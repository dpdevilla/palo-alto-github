{% style %}
  /* --- CARD STYLES --- */
  .ai-product-cards-{{ ai_gen_id }} { padding: {{ block.settings.section_padding }}px 0; }
  .ai-product-cards-container-{{ ai_gen_id }} { max-width: 1200px; margin: 0 auto; padding: 0 20px; }

  /* --- Breadcrumbs --- */
  .ai-breadcrumbs-{{ ai_gen_id }} {
    margin-bottom: 16px;
    font-size: {{ block.settings.breadcrumb_font_size }}px;
    color: {{ block.settings.breadcrumb_text_color }};
  }

  .ai-breadcrumbs-{{ ai_gen_id }} .breadcrumb-link {
    color: {{ block.settings.breadcrumb_link_color }};
    text-decoration: none;
  }

  .ai-breadcrumbs-{{ ai_gen_id }} .breadcrumb-link:hover {
    color: {{ block.settings.breadcrumb_link_hover_color }};
    text-decoration: underline;
  }

  .ai-breadcrumbs-{{ ai_gen_id }} .breadcrumb-current {
    font-weight: 600;
  }

  /* --- Existing card, image, price, and button styles remain unchanged --- */
  .ai-product-cards-grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.columns_desktop }}, 1fr);
    gap: {{ block.settings.grid_gap }}px;
  }

  @media screen and (max-width: 749px) {
    .ai-product-cards-grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.columns_mobile }}, 1fr);
      gap: 14px;
    }
  }

  /* --- rest of your existing CSS here --- */
{% endstyle %}

<product-cards-collection-{{ ai_gen_id }} class="ai-product-cards-{{ ai_gen_id }}">
  <div class="ai-product-cards-container-{{ ai_gen_id }}">

    <!-- Breadcrumbs -->
    {% if block.settings.show_breadcrumbs %}
      <nav class="ai-breadcrumbs-{{ ai_gen_id }}">
        <a href="/" class="breadcrumb-link">Home</a>
        {% if collection %}
          / <span class="breadcrumb-current">{{ collection.title }}</span>
        {% endif %}
      </nav>
    {% endif %}

    {% if block.settings.collection != blank %}
      {% assign collection = block.settings.collection %}
      {% assign products_to_show = block.settings.products_limit %}
      {% if collection.products.size > 0 %}
        <div class="ai-product-cards-grid-{{ ai_gen_id }}">
          {% for product in collection.products limit: products_to_show %}
            {% assign min_price = product.price_min %}
            {% assign max_price = product.price_max %}
            {% assign min_compare_price = product.compare_at_price_min %}
            {% assign max_compare_price = product.compare_at_price_max %}
            
            <div class="ai-product-card-{{ ai_gen_id }}" data-product-id="{{ product.id }}" data-product-handle="{{ product.handle }}">
              <div class="ai-product-image-wrapper-{{ ai_gen_id }}">
                {% if product.featured_image %}
                  <img src="{{ product.featured_image | image_url: width:600 }}" alt="{{ product.featured_image.alt | escape }}" class="ai-product-image-{{ ai_gen_id }} ai-product-image-primary-{{ ai_gen_id }}" data-original-src="{{ product.featured_image | image_url: width:600 }}">
                  {% if product.images.size > 1 %}
                    {% assign second_image = product.images[1] %}
                    <img src="{{ second_image | image_url: width:600 }}" alt="{{ second_image.alt | escape }}" class="ai-product-image-{{ ai_gen_id }} ai-product-image-secondary-{{ ai_gen_id }}">
                  {% endif %}
                {% else %}
                  <div class="ai-product-image-placeholder-{{ ai_gen_id }}">{{ 'product-1' | placeholder_svg_tag }}</div>
                {% endif %}
                {% if max_compare_price > max_price %}
                  <div class="ai-product-badge-{{ ai_gen_id }}">Sale</div>
                {% endif %}
              </div>

              <div class="ai-product-content-{{ ai_gen_id }}">
                <a href="{{ product.url }}" class="ai-product-title-{{ ai_gen_id }}">{{ product.title }}</a>
                <div class="ai-product-price-{{ ai_gen_id }}"
                     data-min-price="{{ min_price }}"
                     data-max-price="{{ max_price }}"
                     data-min-compare-price="{{ min_compare_price }}"
                     data-max-compare-price="{{ max_compare_price }}"
                     data-has-compare-price="{% if max_compare_price > max_price %}true{% else %}false{% endif %}">
                  {% if max_compare_price > max_price %}
                    <span class="ai-product-price-compare-{{ ai_gen_id }}">{{ max_compare_price | money }}</span>
                  {% endif %}
                  {{ min_price | money }}
                </div>

                <div class="ai-product-actions-{{ ai_gen_id }}">
                  {% if product.variants.size > 1 %}
                    <select class="ai-variant-dropdown-{{ ai_gen_id }}">
                      {% for variant in product.variants %}
                        <option value="{{ variant.id }}"
                                data-image="{% if variant.featured_image %}{{ variant.featured_image | image_url: width:600 }}{% else %}{{ product.featured_image | image_url: width:600 }}{% endif %}"
                                data-price="{{ variant.price }}"
                                data-compare-at="{{ variant.compare_at_price }}"
                                {% if variant.id == product.selected_or_first_available_variant.id %}selected{% endif %}
                                {% unless variant.available %}disabled{% endunless %}>
                          {{ variant.title }} {% unless variant.available %}- Sold Out{% endunless %}
                        </option>
                      {% endfor %}
                    </select>
                  {% endif %}

                  <form method="post" action="/cart/add" enctype="multipart/form-data" style="flex-shrink:0;">
                    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" class="variant-id-input-{{ ai_gen_id }}">
                    <button type="submit" class="ai-add-to-cart-button-{{ ai_gen_id }}"
                            data-product-id="{{ product.id }}"
                            data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                            {% unless product.available %}disabled{% endunless %}>
                      {% if product.available %}{{ block.settings.add_to_cart_text }}{% else %}Sold Out{% endif %}
                    </button>
                  </form>
                </div>
              </div>
            </div>
          {% endfor %}
        </div>
      {% else %}
        <div class="ai-empty-collection-{{ ai_gen_id }}"><h3>No products found</h3><p>This collection doesn't contain any products yet.</p></div>
      {% endif %}
    {% else %}
      <div class="ai-empty-collection-{{ ai_gen_id }}"><h3>Select a collection</h3><p>Choose a collection to display products.</p></div>
    {% endif %}
  </div>
</product-cards-collection-{{ ai_gen_id }}>

<script>
(function() {
  const formatMoneyPHP = (cents) => {
    const amount = (cents / 100).toFixed(2);
    return 'â‚±' + amount.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  };

  document.querySelectorAll('.ai-product-card-{{ ai_gen_id }}').forEach(card => {
    const dropdown = card.querySelector('.ai-variant-dropdown-{{ ai_gen_id }}');
    const priceEl = card.querySelector('.ai-product-price-{{ ai_gen_id }}');
    const imageEl = card.querySelector('.ai-product-image-primary-{{ ai_gen_id }}');
    const hiddenInput = card.querySelector('.variant-id-input-{{ ai_gen_id }}');
    const button = card.querySelector('.ai-add-to-cart-button-{{ ai_gen_id }}');

    const initialVariant = dropdown ? dropdown.selectedOptions[0] : null;
    if (initialVariant) {
      const price = parseInt(initialVariant.dataset.price, 10);
      const compareAt = initialVariant.dataset.compareAt ? parseInt(initialVariant.dataset.compareAt, 10) : null;
      if (compareAt && compareAt > price) {
        priceEl.innerHTML = `<span class="ai-product-price-compare-{{ ai_gen_id }}">${formatMoneyPHP(compareAt)}</span>${formatMoneyPHP(price)}`;
      } else {
        priceEl.innerHTML = formatMoneyPHP(price);
      }
    }

    if (!dropdown) return;

    dropdown.addEventListener('change', e => {
      const selectedOption = e.target.selectedOptions[0];
      const newVariantId = selectedOption.value;

      hiddenInput.value = newVariantId;
      button.dataset.variantId = newVariantId;

      const price = parseInt(selectedOption.dataset.price, 10);
      const compareAt = selectedOption.dataset.compareAt ? parseInt(selectedOption.dataset.compareAt, 10) : null;

      if (compareAt && compareAt > price) {
        priceEl.innerHTML = `<span class="ai-product-price-compare-{{ ai_gen_id }}">${formatMoneyPHP(compareAt)}</span>${formatMoneyPHP(price)}`;
      } else {
        priceEl.innerHTML = formatMoneyPHP(price);
      }

      const newImage = selectedOption.dataset.image;
      if (newImage) {
        const tempImage = new Image();
        tempImage.onload = () => { imageEl.src = newImage; };
        tempImage.src = newImage;
      }

      const secondaryEl = card.querySelector('.ai-product-image-secondary-{{ ai_gen_id }}');
      if (secondaryEl && card.dataset.defaultSecondImage) {
        secondaryEl.src = card.dataset.defaultSecondImage;
      }
    });
  });

  // Initialize default second images for hover
  document.querySelectorAll('.ai-product-card-{{ ai_gen_id }}').forEach(card => {
    const secondaryEl = card.querySelector('.ai-product-image-secondary-{{ ai_gen_id }}');
    if (secondaryEl) {
      card.dataset.defaultSecondImage = secondaryEl.src;
    }
  });
})();
</script>



{% schema %}
{
  "name": "Product cards collection",
  "settings": [
    {
      "type": "header",
      "content": "Collection"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 1,
      "max": 50,
      "step": 1,
      "label": "Products to show",
      "default": 8
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 5,
      "step": 1,
      "label": "Columns on desktop",
      "default": 4
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "label": "Columns on mobile",
      "options": [
        { "value": "1", "label": "1" },
        { "value": "2", "label": "2" }
      ],
      "default": "2"
    },
    {
      "type": "range",
      "id": "grid_gap",
      "min": 10,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Grid gap",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Card"
    },
    {
      "type": "color",
      "id": "card_background_color",
      "label": "Card background color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_border_color",
      "label": "Card border color",
      "default": "#dddddd"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "label": "Card border radius",
      "min": 0,
      "max": 50,
      "default": 8
    },
    {
      "type": "range",
      "id": "card_padding",
      "label": "Card padding",
      "min": 0,
      "max": 50,
      "default": 10
    },
    {
      "type": "range",
      "id": "hover_lift",
      "label": "Hover lift",
      "min": 0,
      "max": 20,
      "default": 4
    },
    {
      "type": "range",
      "id": "hover_shadow",
      "label": "Hover shadow",
      "min": 0,
      "max": 20,
      "default": 6
    },
    {
      "type": "range",
      "id": "image_hover_scale",
      "label": "Image hover scale (x10)",
      "min": 10,
      "max": 20,
      "default": 11
    },
    {
      "type": "header",
      "content": "Title & Price"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "label": "Title font size",
      "min": 10,
      "max": 36,
      "default": 16
    },
    {
      "type": "select",
      "id": "title_font_weight",
      "label": "Title font weight",
      "options": [
        { "value": "400", "label": "Normal" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semi-bold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "500"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "title_hover_color",
      "label": "Title hover color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "price_font_size",
      "label": "Price font size",
      "min": 10,
      "max": 36,
      "default": 16
    },
    {
      "type": "select",
      "id": "price_font_weight",
      "label": "Price font weight",
      "options": [
        { "value": "400", "label": "Normal" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semi-bold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "500"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "compare_price_color",
      "label": "Compare price color",
      "default": "#999999"
    },
    {
      "type": "header",
      "content": "Variant & Button"
    },
    {
      "type": "color",
      "id": "button_background_color",
      "label": "Button background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Add to cart button text",
      "default": "Add to Cart"
    },
    {
      "type": "header",
      "content": "Badge"
    },
    {
      "type": "color",
      "id": "badge_background_color",
      "label": "Badge background color",
      "default": "#ff0000"
    },
    {
      "type": "color",
      "id": "badge_text_color",
      "label": "Badge text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "badge_border_radius",
      "label": "Badge border radius",
      "min": 0,
      "max": 50,
      "default": 4
    },
    {
      "type": "header",
      "content": "Filtering & Sorting"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "label": "Enable filtering",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable sorting",
      "default": true
    },
    {
      "type": "select",
      "id": "sort_default",
      "label": "Default sort option",
      "options": [
        { "value": "manual", "label": "Manual" },
        { "value": "best-selling", "label": "Best selling" },
        { "value": "title-ascending", "label": "Alphabetically, A-Z" },
        { "value": "title-descending", "label": "Alphabetically, Z-A" },
        { "value": "price-ascending", "label": "Price, low to high" },
        { "value": "price-descending", "label": "Price, high to low" },
        { "value": "created-ascending", "label": "Date, old to new" },
        { "value": "created-descending", "label": "Date, new to old" }
      ],
      "default": "manual"
    },
    {
      "type": "header",
      "content": "Breadcrumbs"
    },
    {
      "type": "checkbox",
      "id": "show_breadcrumbs",
      "label": "Show breadcrumbs",
      "default": true
    },
    {
      "type": "color",
      "id": "breadcrumb_text_color",
      "label": "Text color",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "breadcrumb_link_color",
      "label": "Link color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "breadcrumb_link_hover_color",
      "label": "Link hover color",
      "default": "#333333"
    },
    {
      "type": "range",
      "id": "breadcrumb_font_size",
      "label": "Font size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "default": 14
    }
  ],
  "presets": [
    {
      "name": "Product cards collection"
    }
  ]
}
{% endschema %}
